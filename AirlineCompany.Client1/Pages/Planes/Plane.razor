@page "/plane/{Id}"

@using AirlineCompany.Application.Planes.Queries.GetPlaneById;
@using AirlineCompany.Application.PlaneModels.Queries.GetModels;
@using AirlineCompany.Application.Flights.Queries.GetPlaneFlights;
@using AirlineCompany.Application.Planes.Commands.Update;
@using AirlineCompany.Application.Common;

@inject HttpClient http;
@inject NavigationManager NavManager;
@inject IJSRuntime JsRuntime;

@if (planeFlightsVm == null || planeVm == null)
{
    <h2>Загрузка...</h2>
}
else
{
    <div class="main">
        <div class="row">
            <div class="col-5 ">
                <div class="" style="margin-top: 200px;">
                    <Errors ErrorsList="errors" />
                    <div class="form-group mb-3">
                        <label>Количество рядов</label>
                        <input @bind-value="command.Rows" maxlength="4" class="form-control" type="number" max="51" min="3">
                    </div>
                    <div class="form-group mb-3">
                        <label>Количество мест в ряду</label>
                        <input @bind-value="command.SitsInRow" maxlength="4" class="form-control" type="number">
                    </div>
                    <div class="form-group mb-3">
                        <label>Всего мест</label>
                        <input disabled value="@(command.SitsInRow*command.Rows)" maxlength="4" class="form-control" type="number">
                    </div>
                    <div class="form-group mb-3">
                        <label>Модель</label>
                        <select @bind="command.ModelId" class="border-container-input form-control form-select-lg" aria-label=".form-select-lg example">
                            <option value="0" selected>Модель</option>
                            @if (modelsVm.ModelsDtos != null)
                            {
                                @foreach (var c in modelsVm.ModelsDtos)
                                {
                                    if (c.Id == command.ModelId)
                                    {
                                        <option selected value="@c.Id">@c.Id - @c.Model</option>
                                        continue;
                                    }
                                    <option value="@c.Id">@c.Id - @c.Model</option>
                                }
                            }
                        </select>
                    </div>
                    <button @onclick="Update" class="btn btn-secondary">Сохранить</button>
                    <button @onclick="Delete" class="btn btn-danger">Удалить</button>
                </div>

            </div>
            <div class="col-7">
                @if (planeFlightsVm.PlaneFlightsDtos == null || planeFlightsVm.PlaneFlightsDtos.Count == 0)
                {
                    <h3>У данного самолета нет рейсов</h3>
                }
                else
                {
                    @foreach (var f in planeFlightsVm.PlaneFlightsDtos)
                    {
                        <div class="row text-center mt-2 shadow-sm passenger-flight">
                            <div class="col-2" style="font-size: 25px;">
                                <a href="flight/@f.Id">
                                    <span class="badge bg-primary text-light">Рейс @f.Id</span>
                                </a>
                            </div>
                            <div class="col-6 text-left" style="margin-top:5px;font-size: 20px;">
                                <span class="badge bg-warning text-light">из: @f.DepartyreCity</span>
                                <span class="badge bg-secondary text-light">в: @f.ArrivedCity</span>
                            </div>
                        </div>
                    }
                }


            </div>
        </div>
    </div>
}


@code {

    private PlanesByIdVm planeVm;
    private GetModelsVm modelsVm;
    private PlaneFlightsVm planeFlightsVm;
    private UpdatePlaneCommand command;
    private List<Error> errors;

    [Parameter]
    public string Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        planeVm = await http.GetFromJsonAsync<PlanesByIdVm>($"https://localhost:5001/api/planes/{Id}");
        modelsVm = await http.GetFromJsonAsync<GetModelsVm>($"https://localhost:5001/api/models/all");
        planeFlightsVm = await http.GetFromJsonAsync<PlaneFlightsVm>($"https://localhost:5001/api/flights/forPlane/{Id}");

        command = new UpdatePlaneCommand()
        {
            Id = int.Parse(Id),
            Rows = planeVm.Plane.Rows,
            SitsInRow = planeVm.Plane.SitsInRow,
            Capacity = planeVm.Plane.Capacity,
            ModelId = planeVm.Plane.ModelId,
        };
    }

    private async void Reload()
    {
        planeFlightsVm = await http.GetFromJsonAsync<PlaneFlightsVm>($"https://localhost:5001/api/flights/forPlane/{Id}");
        StateHasChanged();
    }

    private async void Update()
    {
        command.Capacity = command.Rows * command.SitsInRow;
        var response = await http.PutAsJsonAsync($"https://localhost:5001/api/planes/update", command);
        errors = !response.IsSuccessStatusCode ? await response.Content.ReadFromJsonAsync<List<Error>>() : null;
        if (errors == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Сохранение произошло успешно!");
        }

        StateHasChanged();
    }

    private async void Delete()
    {
        var response = await http.DeleteAsync($"https://localhost:5001/api/planes/delete/{Id}");
        if (!response.IsSuccessStatusCode)
        {
            errors = await response.Content.ReadFromJsonAsync<List<Error>>();
            StateHasChanged();
        }
        else
        {
            NavManager.NavigateTo("planes");
        }

    }
}
